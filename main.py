import datetime as dt
from typing import List, Dict
import json
from fastapi import FastAPI
import mysql.connector 
from mysql.connector import Error
import smtplib

import pandas as pd
import io
import requests
from io import StringIO
from fastapi.responses import StreamingResponse
app = FastAPI()


@app.get('/')
def hello_world() -> str:
    return 'Hello, world'


@app.get('/fed/current_data')
def fetch_current_data():
    mydb = mysql.connector.connect(
        host='mysqldb',
        user='root',
        password='p@ssw0rd1',
        database='fed'
    )
    cursor = mydb.cursor()
    cursor.execute('SELECT * FROM fed.fed_data')
    row_headers = [x[0] for x in cursor.description]
    results = cursor.fetchall()
    json_data = []
    for result in results:
        json_data.append(dict(zip(row_headers, result)))
    cursor.close()
    return json_data

@app.get('/fed/history_data')
def fetch_current_data():
    mydb = mysql.connector.connect(
        host='mysqldb',
        user='root',
        password='p@ssw0rd1',
        database='fed'
    )
    cursor = mydb.cursor()
    cursor.execute('SELECT * FROM fed.history_fed_data')
    row_headers = [x[0] for x in cursor.description]
    results = cursor.fetchall()
    json_data = []
    for result in results:
        json_data.append(dict(zip(row_headers, result)))
    cursor.close()
    return json_data

@app.get('/initdb')
def db_init() -> str:
    try:
        conn = mysql.connector.connect(host='mysqldb', user='root',  
                        password='p@ssw0rd1')#give ur username, password
        if conn.is_connected():
            cursor = conn.cursor()
            cursor.execute('DROP DATABASE IF EXISTS fed')
            cursor.execute("CREATE DATABASE fed")
            print("Database is created")
    except Error as e:
        print("Error while connecting to MySQL", e)

    return f'Database initialised\n'


@app.get('/create')
def table_init() :
    try:
        conn = mysql.connector.connect(host='mysqldb', database='fed', user='root', password='p@ssw0rd1')
        if conn.is_connected():
            cursor = conn.cursor()
            cursor.execute("select database();")
            record = cursor.fetchone()
            print("You're connected to database: ", record)
            cursor.execute('DROP TABLE IF EXISTS fed_data;')

            print('Creating table....')
            cursor.execute("CREATE TABLE fed_data(Series_Description DATE, H8H8B1001NCBA DECIMAL, H8H8B1001NDMA	DECIMAL, H8H8B1001NFRA	DECIMAL, H8H8B1001NLGA	DECIMAL, H8H8B1001NSMA	DECIMAL, H8H8B1002NCBA	DECIMAL, H8H8B1002NDMA	DECIMAL, H8H8B1002NFRA	DECIMAL, H8H8B1002NLGA	DECIMAL, H8H8B1002NSMA	DECIMAL, H8H8B1003NCBA	DECIMAL, H8H8B1003NDMA	DECIMAL, H8H8B1003NFRA	DECIMAL, H8H8B1003NLGA	DECIMAL, H8H8B1003NSMA	DECIMAL, H8H8B1011NCBA	DECIMAL, H8H8B1011NDMA	DECIMAL, H8H8B1011NFRA	DECIMAL, H8H8B1011NLGA	DECIMAL, H8H8B1011NSMA	DECIMAL, H8H8B1020NCBA	DECIMAL, H8H8B1020NDMA	DECIMAL, H8H8B1020NFRA	DECIMAL, H8H8B1020NLGA	DECIMAL, H8H8B1020NSMA	DECIMAL, H8H8B1023NCBA	DECIMAL, H8H8B1023NDMA	DECIMAL, H8H8B1023NFRA	DECIMAL, H8H8B1023NLGA	DECIMAL, H8H8B1023NSMA	DECIMAL, H8H8B1026NCBA	DECIMAL, H8H8B1026NDMA	DECIMAL, H8H8B1026NFRA	DECIMAL, H8H8B1026NLGA	DECIMAL, H8H8B1026NSMA	DECIMAL, H8H8B1027NCBA	DECIMAL, H8H8B1027NDMA	DECIMAL, H8H8B1027NFRA	DECIMAL, H8H8B1027NLGA	DECIMAL, H8H8B1027NSMA	DECIMAL, H8H8B1029NCBA	DECIMAL, H8H8B1029NDMA	DECIMAL, H8H8B1029NFRA	DECIMAL, H8H8B1029NLGA	DECIMAL, H8H8B1029NSMA	DECIMAL, H8H8B1030NCBA	DECIMAL, H8H8B1030NDMA	DECIMAL, H8H8B1030NFRA	DECIMAL, H8H8B1030NLGA	DECIMAL, H8H8B1030NSMA	DECIMAL, H8H8B1043NCBA	DECIMAL, H8H8B1043NDMA	DECIMAL, H8H8B1043NFRA	DECIMAL, H8H8B1043NLGA	DECIMAL, H8H8B1043NSMA	DECIMAL, H8H8B1047NCBA	DECIMAL, H8H8B1047NDMA	DECIMAL, H8H8B1047NFRA	DECIMAL, H8H8B1047NLGA	DECIMAL, H8H8B1047NSMA	DECIMAL, H8H8B1048NCBA	DECIMAL, H8H8B1048NDMA	DECIMAL, H8H8B1048NFRA	DECIMAL, H8H8B1048NLGA	DECIMAL, H8H8B1048NSMA	DECIMAL, H8H8B1058NCBA	DECIMAL, H8H8B1058NDMA	DECIMAL, H8H8B1058NFRA	DECIMAL, H8H8B1058NLGA	DECIMAL, H8H8B1058NSMA	DECIMAL, H8H8B1072NCBA	DECIMAL, H8H8B1072NDMA	DECIMAL, H8H8B1072NFRA	DECIMAL, H8H8B1072NLGA	DECIMAL, H8H8B1072NSMA	DECIMAL, H8H8B1091NCBA	DECIMAL, H8H8B1091NDMA	DECIMAL, H8H8B1091NFRA	DECIMAL, H8H8B1091NLGA	DECIMAL, H8H8B1091NSMA	DECIMAL, H8H8B1100NCBA	DECIMAL, H8H8B1100NDMA	DECIMAL, H8H8B1100NFRA	DECIMAL, H8H8B1100NLGA	DECIMAL, H8H8B1100NSMA	DECIMAL, H8H8B1110NCBA	DECIMAL, H8H8B1110NDMA	DECIMAL, H8H8B1110NFRA	DECIMAL, H8H8B1110NLGA	DECIMAL, H8H8B1110NSMA	DECIMAL, H8H8B1151NCBA	DECIMAL, H8H8B1151NDMA	DECIMAL, H8H8B1151NFRA	DECIMAL, H8H8B1151NLGA	DECIMAL, H8H8B1151NSMA	DECIMAL, H8H8B1152NCBA	DECIMAL, H8H8B1152NDMA	DECIMAL, H8H8B1152NFRA	DECIMAL, H8H8B1152NLGA	DECIMAL, H8H8B1152NSMA	DECIMAL, H8H8B1215NCBA	DECIMAL, H8H8B1215NDMA	DECIMAL, H8H8B1215NFRA	DECIMAL, H8H8B1215NLGA	DECIMAL, H8H8B1215NSMA	DECIMAL, H8H8B1216NCBA	DECIMAL, H8H8B1216NDMA	DECIMAL, H8H8B1216NFRA	DECIMAL, H8H8B1216NLGA	DECIMAL, H8H8B1216NSMA	DECIMAL, H8H8B1217NCBA	DECIMAL, H8H8B1217NDMA	DECIMAL, H8H8B1217NFRA	DECIMAL, H8H8B1217NLGA	DECIMAL, H8H8B1217NSMA	DECIMAL, H8H8B1218NCBA	DECIMAL, H8H8B1218NDMA	DECIMAL, H8H8B1218NFRA	DECIMAL, H8H8B1218NLGA	DECIMAL, H8H8B1218NSMA	DECIMAL, H8H8B1220NCBA	DECIMAL, H8H8B1220NDMA	DECIMAL, H8H8B1220NFRA	DECIMAL, H8H8B1220NLGA	DECIMAL, H8H8B1220NSMA	DECIMAL, H8H8B1221NCBA	DECIMAL, H8H8B1221NDMA	DECIMAL, H8H8B1221NFRA	DECIMAL, H8H8B1221NLGA	DECIMAL, H8H8B1221NSMA	DECIMAL, H8H8B1243NCBA	DECIMAL, H8H8B1243NDMA	DECIMAL, H8H8B1243NFRA	DECIMAL, H8H8B1243NLGA	DECIMAL, H8H8B1243NSMA	DECIMAL, H8H8B1245NCBA	DECIMAL, H8H8B1245NDMA	DECIMAL, H8H8B1245NFRA	DECIMAL, H8H8B1245NLGA	DECIMAL, H8H8B1245NSMA	DECIMAL, H8H8B1247NCBA	DECIMAL, H8H8B1247NDMA	DECIMAL, H8H8B1247NFRA	DECIMAL, H8H8B1247NLGA	DECIMAL, H8H8B1247NSMA	DECIMAL, H8H8B1301NCBA	DECIMAL, H8H8B1301NDMA	DECIMAL, H8H8B1301NFRA	DECIMAL, H8H8B1301NLGA	DECIMAL, H8H8B1301NSMA	DECIMAL, H8H8B1302NCBA	DECIMAL, H8H8B1302NDMA	DECIMAL, H8H8B1302NFRA	DECIMAL, H8H8B1302NLGA	DECIMAL, H8H8B1302NSMA	DECIMAL, H8H8B1303NCBA	DECIMAL, H8H8B1303NDMA	DECIMAL, H8H8B1303NFRA	DECIMAL, H8H8B1303NLGA	DECIMAL, H8H8B1303NSMA	DECIMAL, H8H8B1304NCBA	DECIMAL, H8H8B1304NDMA	DECIMAL, H8H8B1304NFRA	DECIMAL, H8H8B1304NLGA	DECIMAL, H8H8B1304NSMA	DECIMAL, H8H8B1310NCBA	DECIMAL, H8H8B1310NDMA	DECIMAL, H8H8B1310NFRA	DECIMAL, H8H8B1310NLGA	DECIMAL, H8H8B1310NSMA	DECIMAL, H8H8B3053NCBA	DECIMAL, H8H8B3053NDMA	DECIMAL, H8H8B3053NFRA	DECIMAL, H8H8B3053NLGA	DECIMAL, H8H8B3053NSMA	DECIMAL, H8H8B3092NCBA	DECIMAL, H8H8B3092NDMA	DECIMAL, H8H8B3092NFRA	DECIMAL, H8H8B3092NLGA	DECIMAL, H8H8B3092NSMA	DECIMAL, H8H8B3094NCBA	DECIMAL, H8H8B3094NDMA	DECIMAL, H8H8B3094NFRA	DECIMAL, H8H8B3094NLGA	DECIMAL, H8H8B3094NSMA	DECIMAL, H8H8B3095NCBA	DECIMAL, H8H8B3095NDMA	DECIMAL, H8H8B3095NFRA	DECIMAL, H8H8B3095NLGA	DECIMAL, H8H8B3095NSMA	DECIMAL, H8H8B3219NCBA	DECIMAL, H8H8B3219NDMA	DECIMAL, H8H8B3219NFRA	DECIMAL, H8H8B3219NLGA	DECIMAL, H8H8B3219NSMA	DECIMAL, H8H8B3248NCBA	DECIMAL, H8H8B3248NDMA	DECIMAL, H8H8B3248NFRA	DECIMAL, H8H8B3248NLGA	DECIMAL, H8H8B3248NSMA	DECIMAL, H8H8B3305NCBA	DECIMAL, H8H8B3305NDMA	DECIMAL, H8H8B3305NFRA	DECIMAL, H8H8B3305NLGA	DECIMAL, H8H8B3305NSMA DECIMAL)")
            print("Table is created....")
            cursor.execute("CREATE TABLE IF NOT EXISTS history_fed_data(Loaded_Timestamp DATETIME default current_timestamp(),Series_Description DATE, H8H8B1001NCBA DECIMAL, H8H8B1001NDMA	DECIMAL, H8H8B1001NFRA	DECIMAL, H8H8B1001NLGA	DECIMAL, H8H8B1001NSMA	DECIMAL, H8H8B1002NCBA	DECIMAL, H8H8B1002NDMA	DECIMAL, H8H8B1002NFRA	DECIMAL, H8H8B1002NLGA	DECIMAL, H8H8B1002NSMA	DECIMAL, H8H8B1003NCBA	DECIMAL, H8H8B1003NDMA	DECIMAL, H8H8B1003NFRA	DECIMAL, H8H8B1003NLGA	DECIMAL, H8H8B1003NSMA	DECIMAL, H8H8B1011NCBA	DECIMAL, H8H8B1011NDMA	DECIMAL, H8H8B1011NFRA	DECIMAL, H8H8B1011NLGA	DECIMAL, H8H8B1011NSMA	DECIMAL, H8H8B1020NCBA	DECIMAL, H8H8B1020NDMA	DECIMAL, H8H8B1020NFRA	DECIMAL, H8H8B1020NLGA	DECIMAL, H8H8B1020NSMA	DECIMAL, H8H8B1023NCBA	DECIMAL, H8H8B1023NDMA	DECIMAL, H8H8B1023NFRA	DECIMAL, H8H8B1023NLGA	DECIMAL, H8H8B1023NSMA	DECIMAL, H8H8B1026NCBA	DECIMAL, H8H8B1026NDMA	DECIMAL, H8H8B1026NFRA	DECIMAL, H8H8B1026NLGA	DECIMAL, H8H8B1026NSMA	DECIMAL, H8H8B1027NCBA	DECIMAL, H8H8B1027NDMA	DECIMAL, H8H8B1027NFRA	DECIMAL, H8H8B1027NLGA	DECIMAL, H8H8B1027NSMA	DECIMAL, H8H8B1029NCBA	DECIMAL, H8H8B1029NDMA	DECIMAL, H8H8B1029NFRA	DECIMAL, H8H8B1029NLGA	DECIMAL, H8H8B1029NSMA	DECIMAL, H8H8B1030NCBA	DECIMAL, H8H8B1030NDMA	DECIMAL, H8H8B1030NFRA	DECIMAL, H8H8B1030NLGA	DECIMAL, H8H8B1030NSMA	DECIMAL, H8H8B1043NCBA	DECIMAL, H8H8B1043NDMA	DECIMAL, H8H8B1043NFRA	DECIMAL, H8H8B1043NLGA	DECIMAL, H8H8B1043NSMA	DECIMAL, H8H8B1047NCBA	DECIMAL, H8H8B1047NDMA	DECIMAL, H8H8B1047NFRA	DECIMAL, H8H8B1047NLGA	DECIMAL, H8H8B1047NSMA	DECIMAL, H8H8B1048NCBA	DECIMAL, H8H8B1048NDMA	DECIMAL, H8H8B1048NFRA	DECIMAL, H8H8B1048NLGA	DECIMAL, H8H8B1048NSMA	DECIMAL, H8H8B1058NCBA	DECIMAL, H8H8B1058NDMA	DECIMAL, H8H8B1058NFRA	DECIMAL, H8H8B1058NLGA	DECIMAL, H8H8B1058NSMA	DECIMAL, H8H8B1072NCBA	DECIMAL, H8H8B1072NDMA	DECIMAL, H8H8B1072NFRA	DECIMAL, H8H8B1072NLGA	DECIMAL, H8H8B1072NSMA	DECIMAL, H8H8B1091NCBA	DECIMAL, H8H8B1091NDMA	DECIMAL, H8H8B1091NFRA	DECIMAL, H8H8B1091NLGA	DECIMAL, H8H8B1091NSMA	DECIMAL, H8H8B1100NCBA	DECIMAL, H8H8B1100NDMA	DECIMAL, H8H8B1100NFRA	DECIMAL, H8H8B1100NLGA	DECIMAL, H8H8B1100NSMA	DECIMAL, H8H8B1110NCBA	DECIMAL, H8H8B1110NDMA	DECIMAL, H8H8B1110NFRA	DECIMAL, H8H8B1110NLGA	DECIMAL, H8H8B1110NSMA	DECIMAL, H8H8B1151NCBA	DECIMAL, H8H8B1151NDMA	DECIMAL, H8H8B1151NFRA	DECIMAL, H8H8B1151NLGA	DECIMAL, H8H8B1151NSMA	DECIMAL, H8H8B1152NCBA	DECIMAL, H8H8B1152NDMA	DECIMAL, H8H8B1152NFRA	DECIMAL, H8H8B1152NLGA	DECIMAL, H8H8B1152NSMA	DECIMAL, H8H8B1215NCBA	DECIMAL, H8H8B1215NDMA	DECIMAL, H8H8B1215NFRA	DECIMAL, H8H8B1215NLGA	DECIMAL, H8H8B1215NSMA	DECIMAL, H8H8B1216NCBA	DECIMAL, H8H8B1216NDMA	DECIMAL, H8H8B1216NFRA	DECIMAL, H8H8B1216NLGA	DECIMAL, H8H8B1216NSMA	DECIMAL, H8H8B1217NCBA	DECIMAL, H8H8B1217NDMA	DECIMAL, H8H8B1217NFRA	DECIMAL, H8H8B1217NLGA	DECIMAL, H8H8B1217NSMA	DECIMAL, H8H8B1218NCBA	DECIMAL, H8H8B1218NDMA	DECIMAL, H8H8B1218NFRA	DECIMAL, H8H8B1218NLGA	DECIMAL, H8H8B1218NSMA	DECIMAL, H8H8B1220NCBA	DECIMAL, H8H8B1220NDMA	DECIMAL, H8H8B1220NFRA	DECIMAL, H8H8B1220NLGA	DECIMAL, H8H8B1220NSMA	DECIMAL, H8H8B1221NCBA	DECIMAL, H8H8B1221NDMA	DECIMAL, H8H8B1221NFRA	DECIMAL, H8H8B1221NLGA	DECIMAL, H8H8B1221NSMA	DECIMAL, H8H8B1243NCBA	DECIMAL, H8H8B1243NDMA	DECIMAL, H8H8B1243NFRA	DECIMAL, H8H8B1243NLGA	DECIMAL, H8H8B1243NSMA	DECIMAL, H8H8B1245NCBA	DECIMAL, H8H8B1245NDMA	DECIMAL, H8H8B1245NFRA	DECIMAL, H8H8B1245NLGA	DECIMAL, H8H8B1245NSMA	DECIMAL, H8H8B1247NCBA	DECIMAL, H8H8B1247NDMA	DECIMAL, H8H8B1247NFRA	DECIMAL, H8H8B1247NLGA	DECIMAL, H8H8B1247NSMA	DECIMAL, H8H8B1301NCBA	DECIMAL, H8H8B1301NDMA	DECIMAL, H8H8B1301NFRA	DECIMAL, H8H8B1301NLGA	DECIMAL, H8H8B1301NSMA	DECIMAL, H8H8B1302NCBA	DECIMAL, H8H8B1302NDMA	DECIMAL, H8H8B1302NFRA	DECIMAL, H8H8B1302NLGA	DECIMAL, H8H8B1302NSMA	DECIMAL, H8H8B1303NCBA	DECIMAL, H8H8B1303NDMA	DECIMAL, H8H8B1303NFRA	DECIMAL, H8H8B1303NLGA	DECIMAL, H8H8B1303NSMA	DECIMAL, H8H8B1304NCBA	DECIMAL, H8H8B1304NDMA	DECIMAL, H8H8B1304NFRA	DECIMAL, H8H8B1304NLGA	DECIMAL, H8H8B1304NSMA	DECIMAL, H8H8B1310NCBA	DECIMAL, H8H8B1310NDMA	DECIMAL, H8H8B1310NFRA	DECIMAL, H8H8B1310NLGA	DECIMAL, H8H8B1310NSMA	DECIMAL, H8H8B3053NCBA	DECIMAL, H8H8B3053NDMA	DECIMAL, H8H8B3053NFRA	DECIMAL, H8H8B3053NLGA	DECIMAL, H8H8B3053NSMA	DECIMAL, H8H8B3092NCBA	DECIMAL, H8H8B3092NDMA	DECIMAL, H8H8B3092NFRA	DECIMAL, H8H8B3092NLGA	DECIMAL, H8H8B3092NSMA	DECIMAL, H8H8B3094NCBA	DECIMAL, H8H8B3094NDMA	DECIMAL, H8H8B3094NFRA	DECIMAL, H8H8B3094NLGA	DECIMAL, H8H8B3094NSMA	DECIMAL, H8H8B3095NCBA	DECIMAL, H8H8B3095NDMA	DECIMAL, H8H8B3095NFRA	DECIMAL, H8H8B3095NLGA	DECIMAL, H8H8B3095NSMA	DECIMAL, H8H8B3219NCBA	DECIMAL, H8H8B3219NDMA	DECIMAL, H8H8B3219NFRA	DECIMAL, H8H8B3219NLGA	DECIMAL, H8H8B3219NSMA	DECIMAL, H8H8B3248NCBA	DECIMAL, H8H8B3248NDMA	DECIMAL, H8H8B3248NFRA	DECIMAL, H8H8B3248NLGA	DECIMAL, H8H8B3248NSMA	DECIMAL, H8H8B3305NCBA	DECIMAL, H8H8B3305NDMA	DECIMAL, H8H8B3305NFRA	DECIMAL, H8H8B3305NLGA	DECIMAL, H8H8B3305NSMA DECIMAL)")
            print("Table is created....")
            

            #url to the fed
            url="https://www.federalreserve.gov/datadownload/Output.aspx?rel=H8&series=8789dda98817a5682f19fb7e8093e669&lastobs=100&from=&to=&filetype=csv&label=include&layout=seriescolumn"
            s=requests.get(url).text
            df=pd.read_csv(StringIO(s))
            df.drop([0,1,2,3,4], inplace=True)
            df.reset_index(drop=True, inplace=True)
            df['Series Description'] = pd.to_datetime(df['Series Description'])
            df.iloc[:,1:] = df.iloc[:,1:].astype('float')
            # loop through the data frame
            for i,row in df.iterrows():
                #here %S means string values 
                sql = "INSERT INTO fed.fed_data VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)"
                cursor.execute(sql, tuple(row))
                print("Record inserted")
            cursor.execute('INSERT INTO fed.history_fed_data (Series_Description, H8H8B1001NCBA , H8H8B1001NDMA	, H8H8B1001NFRA	, H8H8B1001NLGA	, H8H8B1001NSMA	, H8H8B1002NCBA	, H8H8B1002NDMA	, H8H8B1002NFRA	, H8H8B1002NLGA	, H8H8B1002NSMA	, H8H8B1003NCBA	, H8H8B1003NDMA	, H8H8B1003NFRA	, H8H8B1003NLGA	, H8H8B1003NSMA	, H8H8B1011NCBA	, H8H8B1011NDMA	, H8H8B1011NFRA	, H8H8B1011NLGA	, H8H8B1011NSMA	, H8H8B1020NCBA	, H8H8B1020NDMA	, H8H8B1020NFRA	, H8H8B1020NLGA	, H8H8B1020NSMA	, H8H8B1023NCBA	, H8H8B1023NDMA	, H8H8B1023NFRA	, H8H8B1023NLGA	, H8H8B1023NSMA	, H8H8B1026NCBA	, H8H8B1026NDMA	, H8H8B1026NFRA	, H8H8B1026NLGA	, H8H8B1026NSMA	, H8H8B1027NCBA	, H8H8B1027NDMA	, H8H8B1027NFRA	, H8H8B1027NLGA	, H8H8B1027NSMA	, H8H8B1029NCBA	, H8H8B1029NDMA	, H8H8B1029NFRA	, H8H8B1029NLGA	, H8H8B1029NSMA	, H8H8B1030NCBA	, H8H8B1030NDMA	, H8H8B1030NFRA	, H8H8B1030NLGA	, H8H8B1030NSMA	, H8H8B1043NCBA	, H8H8B1043NDMA	, H8H8B1043NFRA	, H8H8B1043NLGA	, H8H8B1043NSMA	, H8H8B1047NCBA	, H8H8B1047NDMA	, H8H8B1047NFRA	, H8H8B1047NLGA	, H8H8B1047NSMA	, H8H8B1048NCBA	, H8H8B1048NDMA	, H8H8B1048NFRA	, H8H8B1048NLGA	, H8H8B1048NSMA	, H8H8B1058NCBA	, H8H8B1058NDMA	, H8H8B1058NFRA	, H8H8B1058NLGA	, H8H8B1058NSMA	, H8H8B1072NCBA	, H8H8B1072NDMA	, H8H8B1072NFRA	, H8H8B1072NLGA	, H8H8B1072NSMA	, H8H8B1091NCBA	, H8H8B1091NDMA	, H8H8B1091NFRA	, H8H8B1091NLGA	, H8H8B1091NSMA	, H8H8B1100NCBA	, H8H8B1100NDMA	, H8H8B1100NFRA	, H8H8B1100NLGA	, H8H8B1100NSMA	, H8H8B1110NCBA	, H8H8B1110NDMA	, H8H8B1110NFRA	, H8H8B1110NLGA	, H8H8B1110NSMA	, H8H8B1151NCBA	, H8H8B1151NDMA	, H8H8B1151NFRA	, H8H8B1151NLGA	, H8H8B1151NSMA	, H8H8B1152NCBA	, H8H8B1152NDMA	, H8H8B1152NFRA	, H8H8B1152NLGA	, H8H8B1152NSMA	, H8H8B1215NCBA	, H8H8B1215NDMA	, H8H8B1215NFRA	, H8H8B1215NLGA	, H8H8B1215NSMA	, H8H8B1216NCBA	, H8H8B1216NDMA	, H8H8B1216NFRA	, H8H8B1216NLGA	, H8H8B1216NSMA	, H8H8B1217NCBA	, H8H8B1217NDMA	, H8H8B1217NFRA	, H8H8B1217NLGA	, H8H8B1217NSMA	, H8H8B1218NCBA	, H8H8B1218NDMA	, H8H8B1218NFRA	, H8H8B1218NLGA	, H8H8B1218NSMA	, H8H8B1220NCBA	, H8H8B1220NDMA	, H8H8B1220NFRA	, H8H8B1220NLGA	, H8H8B1220NSMA	, H8H8B1221NCBA	, H8H8B1221NDMA	, H8H8B1221NFRA	, H8H8B1221NLGA	, H8H8B1221NSMA	, H8H8B1243NCBA	, H8H8B1243NDMA	, H8H8B1243NFRA	, H8H8B1243NLGA	, H8H8B1243NSMA	, H8H8B1245NCBA	, H8H8B1245NDMA	, H8H8B1245NFRA	, H8H8B1245NLGA	, H8H8B1245NSMA	, H8H8B1247NCBA	, H8H8B1247NDMA	, H8H8B1247NFRA	, H8H8B1247NLGA	, H8H8B1247NSMA	, H8H8B1301NCBA	, H8H8B1301NDMA	, H8H8B1301NFRA	, H8H8B1301NLGA	, H8H8B1301NSMA	, H8H8B1302NCBA	, H8H8B1302NDMA	, H8H8B1302NFRA	, H8H8B1302NLGA	, H8H8B1302NSMA	, H8H8B1303NCBA	, H8H8B1303NDMA	, H8H8B1303NFRA	, H8H8B1303NLGA	, H8H8B1303NSMA	, H8H8B1304NCBA	, H8H8B1304NDMA	, H8H8B1304NFRA	, H8H8B1304NLGA	, H8H8B1304NSMA	, H8H8B1310NCBA	, H8H8B1310NDMA	, H8H8B1310NFRA	, H8H8B1310NLGA	, H8H8B1310NSMA	, H8H8B3053NCBA	, H8H8B3053NDMA	, H8H8B3053NFRA	, H8H8B3053NLGA	, H8H8B3053NSMA	, H8H8B3092NCBA	, H8H8B3092NDMA	, H8H8B3092NFRA	, H8H8B3092NLGA	, H8H8B3092NSMA	, H8H8B3094NCBA	, H8H8B3094NDMA	, H8H8B3094NFRA	, H8H8B3094NLGA	, H8H8B3094NSMA	, H8H8B3095NCBA	, H8H8B3095NDMA	, H8H8B3095NFRA	, H8H8B3095NLGA	, H8H8B3095NSMA	, H8H8B3219NCBA	, H8H8B3219NDMA	, H8H8B3219NFRA	, H8H8B3219NLGA	, H8H8B3219NSMA	, H8H8B3248NCBA	, H8H8B3248NDMA	, H8H8B3248NFRA	, H8H8B3248NLGA	, H8H8B3248NSMA	, H8H8B3305NCBA	, H8H8B3305NDMA	, H8H8B3305NFRA	, H8H8B3305NLGA	, H8H8B3305NSMA ) SELECT * from fed.fed_data')
            print ("archieved")
                # the connection is not auto committed by default, so we must commit to save our changes
            conn.commit()
            cursor.close()
            
            # send mails

            # mail = Mailer(email='someone@gmail.com', password='your_password')
            # mail.send(receiver='someone@example.com', subject='Sucessfuly loaded data', message='From Python!')

                    
    except Error as e:
            print("Error while connecting to MySQL", e)
    
    return f'Table with current data fetched\n'

@app.get('/aggregations')
def find_agg():
    mydb = mysql.connector.connect(
        host='mysqldb',
        user='root',
        password='p@ssw0rd1',
        database='fed'
    )
    # cursor = mydb.cursor()
    # cursor.execute('SELECT * FROM fed.fed_data')
    sql = "SELECT * FROM fed.history_fed_data"
    dfa = pd.read_sql(sql, con = mydb)

    final_df = pd.DataFrame()
    #Finindig moving averages for a eight  week window
    final_df['commercial real estate loans (all comm banks)'] = dfa['H8H8B3219NCBA']
    final_df['Moving average of commercial real estate loans (all comm banks)'] = dfa['H8H8B3219NCBA'].rolling(8).mean()
    final_df['Mortgage-backed securities'] = dfa['H8H8B1303NLGA']
    final_df['Moving average of Mortgage-backed securities'] = dfa['H8H8B1303NLGA'].rolling(8).mean()
    # finding differences in the Cash assets, all commercial banks, seasonally adjusted	for each week
    diff = dfa.set_index('Series_Description').diff()['H8H8B1048NCBA'].tolist()
    final_df['differences of cash assets of all commercial banks'] = diff
    
    # result = final_df.to_json(orient='records')
    # return result

    def iter_df():
        for _, row in final_df.iterrows():
            yield json.dumps(row.to_dict()) + '\n'

    return StreamingResponse(iter_df(), media_type="application/json")
